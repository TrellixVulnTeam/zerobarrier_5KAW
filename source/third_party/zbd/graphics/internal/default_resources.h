#pragma once

namespace DefaultResources {
  const char *DefaultEffect =
  "float4x4 ViewProjection;"
  "float2 HalfPixelOffset;"
  "float2 HalfTexelOffset0;"
  "float2 HalfTexelOffset1;"
  "float2 Tex0Scalar;"
  "float2 Tex1Scalar;"
  ""
  "Texture Tex0;"
  "sampler Tex0Sampler = "
  "sampler_state"
  "{"
  "   Texture = <Tex0>;"
  "   MipFilter = LINEAR;"
  "   MinFilter = LINEAR;"
  "   MagFilter = LINEAR;"
  "};"
  ""
  "Texture Tex1;"
  "sampler Tex1Sampler = "
  "sampler_state"
  "{"
  "   Texture = <Tex1>;"
  "   MipFilter = LINEAR;"
  "   MinFilter = LINEAR;"
  "   MagFilter = LINEAR;"
  "};"
  ""
  "struct vertex_in"
  "{"
  "  float2 position : POSITION;"
  "  float4 color    : COLOR0;"
  "  float2 tex0     : TEXCOORD0;"
  "  float2 tex1     : TEXCOORD1;"
  "};"
  ""
  "struct vertex_out"
  "{"
  "  float4 position : POSITION;"
  "  float4 color    : COLOR0;"
  "  float2 tex0     : TEXCOORD0;"
  "  float2 tex1     : TEXCOORD1;"
  "};"
  ""
  "vertex_out process_vertex(vertex_in input)"
  "{"
  "  vertex_out output;"
  ""
  "  output.position.xy = input.position;"
  "  output.position.z = 0.0;"
  "  output.position.w = 1.0;"
  "  output.position = mul(output.position, ViewProjection);"
  ""
  "  output.color = input.color;"
  "  output.tex0 = input.tex0 * Tex0Scalar + HalfTexelOffset0;"
  "  output.tex1 = input.tex1 * Tex1Scalar + HalfTexelOffset1;"
  ""
  "  return output;"
  "}"
  ""
  "struct fragment_out"
  "{"
  "  float4 color : COLOR0;"
  "};"
  ""
  "fragment_out color_fragment(vertex_out input)"
  "{"
  "  fragment_out output;"
  "  output.color = input.color;"
  ""
  "  return output;"
  "}"
  ""
  "fragment_out texture_fragment(vertex_out input)"
  "{"
  "  fragment_out output;"
  "  output.color = tex2D(Tex0Sampler, input.tex0) * input.color;"
  ""
  "  return output;"
  "}"
  ""
  "technique ColorShader"
  "{"
  "  pass P0"
  "  {"
  "    VertexShader = compile vs_2_0 process_vertex();"
  "    PixelShader = compile ps_2_0 color_fragment();"
  "  }"
  "}"
  ""
  "technique TextureShader"
  "{"
  "  pass P0"
  "  {"
  "    VertexShader = compile vs_2_0 process_vertex();"
  "    PixelShader = compile ps_2_0 texture_fragment();"
  "  }"
  "}";

  const u8 DefaultFont[] = {0};
}
